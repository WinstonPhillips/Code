Microsoft (R) Macro Assembler Version 6.15.8803		    04/19/19 13:43:38
quicksort.asm						     Page 1 - 1


				;for our recursion to compute b
				.386
				.MODEL FLAT

				INCLUDE debug.h
			      C INCLUDE io.h
			      C ; IO.H -- header file for I/O macros
			      C ; 32-bit version for flat memory model
			      C ; R. Detmer   last revised 8/2000
			      C .NOLIST     ; turn off listing
			      C .LIST        ; begin listing
			      C 
			      C 
 = 0000000D		      C CR          EQU    0Dh   ; carriage return character
 = 0000000A		      C LF          EQU    0Ah   ; linefeed character
			      C 
 00000000		      C .DATA
 00000000 0D 0A 00	      C carriage    BYTE     CR, LF, 0 
 00000003  0000000D [	      C text        BYTE     13 DUP(?)
	    00
	   ]
			      C 
			      C outputW    	MACRO   var
			      C                    itoa text, var
			      C                    output text
			      C                    output carriage
			      C                 ENDM
			      C 
			      C outputD  	MACRO  var
			      C                    dtoa text, var
			      C                    output text
			      C                    output carriage
			      C          	ENDM
			      C 
			      C inputW          MACRO  prompt, location
			      C                    output prompt
			      C                    input text, 8
			      C                    atoi text
			      C                    mov location, ax
			      C                 ENDM
			      C 
			      C inputD          MACRO  prompt, location
			      C                    output prompt
			      C                    input text, 13
			      C                    atod text
			      C                    mov location, eax
			      C                 ENDM
			      C 
				INCLUDE str_utils.h
			      C .NOLIST
			      C .LIST
			      C 

				PUBLIC quicksort_start_proc, quicksort_proc, swap_proc, partition_proc

 00000000			.CODE			; only need one declaration of .CODE
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

 = [ebp+16]			giantText_addr 		EQU [ebp+16]
 = [ebp+12]			MAXLEN				EQU [ebp+12]
 = [ebp+8]			numWords			EQU	[ebp+8]


 00000000			quicksort_start_proc PROC NEAR32

 00000000  55			push 	ebp 
 00000001  8B EC		mov 	ebp, esp
 00000003  51			push 	ecx
 00000004  50			push 	eax
 00000005  57			push 	edi
 00000006  56			push 	esi
 00000007  66| 9C		pushf	
					
 00000009  8B 45 0C			mov eax, MAXLEN
 0000000C  83 E8 02			sub eax, 2
 0000000F  89 45 0C			mov MAXLEN, eax
					
 00000012  B8 00000000			mov eax, 0
 00000017  8B 45 08			mov eax, numWords
 0000001A  48				dec eax
 0000001B  89 45 08			mov numWords, eax
					
 0000001E  FF 75 10			push giantText_addr
 00000021  FF 75 0C			push MAXLEN
 00000024  68 00000000			push DWORD PTR 0
 00000029  FF 75 08			push numWords
 0000002C  E8 0000000C			call quicksort_proc


 00000031  66| 9D		popf
 00000033  5E			pop 	esi
 00000034  5F			pop 	edi
 00000035  58			pop 	eax
 00000036  59			pop 	ecx
 00000037  8B E5		mov 	esp, ebp
 00000039  5D			pop 	ebp
 0000003A  C2 000C		ret 	12


 0000003D			quicksort_start_proc ENDP
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 = [ebp+20]			giantText_addr 	EQU  [ebp+20]
 = [ebp+16]			MAXLEN 			EQU  [ebp+16]
 = [ebp+12]			lowz			EQU  [ebp+12]
 = [ebp+8]			highz			EQU  [ebp+8]

 0000003D			quicksort_proc PROC NEAR32

 0000003D  55			push 	ebp 
 0000003E  8B EC		mov 	ebp, esp
 00000040  51			push 	ecx
 00000041  50			push 	eax
 00000042  53			push 	ebx
 00000043  57			push 	edi
 00000044  56			push 	esi
 00000045  66| 9C		pushf	
					
					; First, compare low to high ;
						
 00000047  B8 00000000				mov eax, 0
 0000004C  B9 00000000				mov ecx, 0
					
 00000051  8B 45 0C				mov eax, lowz
 00000054  8B 4D 08				mov ecx, highz
					
 00000057  3B C1				cmp eax, ecx    		; if (low < high)
 00000059  7D 35				jge dantes_Gates
						
 0000005B  FF 75 14				push giantText_addr
 0000005E  FF 75 10				push MAXLEN
 00000061  FF 75 0C				push DWORD PTR lowz 		
 00000064  FF 75 08				push DWORD PTR highz  	
 00000067  E8 00000031				call partition_proc
						
 0000006C  8B C3				mov eax, ebx
 0000006E  48					dec eax
								
 0000006F  FF 75 14				push DWORD PTR giantText_addr
 00000072  FF 75 10				push DWORD PTR MAXLEN
 00000075  FF 75 0C				push DWORD PTR lowz
 00000078  50					push eax
 00000079  E8 FFFFFFBF				call quicksort_proc
						
 0000007E  8B C3				mov eax, ebx
 00000080  40					inc eax
						
 00000081  FF 75 14				push DWORD PTR giantText_addr
 00000084  FF 75 10				push DWORD PTR MAXLEN
 00000087  50					push eax
 00000088  FF 75 08				push DWORD PTR highz
 0000008B  E8 FFFFFFAD				call quicksort_proc
						
					
					
 00000090				dantes_Gates:

 00000090  66| 9D		popf
 00000092  5E			pop 	esi
 00000093  5F			pop 	edi
 00000094  5B			pop 	ebx
 00000095  58			pop 	eax
 00000096  59			pop 	ecx
 00000097  8B E5		mov 	esp, ebp
 00000099  5D			pop 	ebp
 0000009A  C2 0010		ret 	16

 0000009D			quicksort_proc ENDP
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

 = [ebp+20]			giantText_addr 	EQU  [ebp+20]
 = [ebp+16]			MAXLEN 			EQU  [ebp+16]
 = [ebp+12]			lowz			EQU  [ebp+12]
 = [ebp+8]			highz			EQU  [ebp+8]


 0000009D			partition_proc PROC NEAR32

 0000009D  55			push 	ebp 
 0000009E  8B EC		mov 	ebp, esp
 000000A0  51			push 	ecx
 000000A1  52			push 	edx
 000000A2  50			push 	eax
 000000A3  57			push 	edi
 000000A4  56			push 	esi
 000000A5  66| 9C		pushf	

					; the first thing we need to do is set up our pivot and get i = (low -1);
					; Do this by getting edi to our high point ;
					
 000000A7  8B 5D 08				mov ebx, highz		;put our high value in ebx
						
 000000AA  B8 00000000				mov eax, 0
 000000AF  8B 45 10				mov eax, MAXLEN
						
 000000B2  F7 E3				mul ebx
						
 000000B4  8B 7D 14				mov edi, giantText_addr
 000000B7  03 F8				add edi, eax
						
 000000B9  BB 00000000				mov ebx, 0
 000000BE  8B 5D 0C				mov ebx, lowz
 000000C1  4B					dec ebx		; ebx now contains low -1, or i
					
					; Now, we begin our loop ;
					;First, set up counter	;
					
 000000C2  8B 4D 0C				mov ecx, lowz	; j counter ( j = low)
 000000C5  49					dec ecx			; for loop
					
 000000C6				proc_loop:
					
 000000C6  41					inc ecx
						
 000000C7  8B 45 08				mov eax,  highz
 000000CA  48					dec eax
						
 000000CB  3B C8				cmp ecx, eax
 000000CD  7F 32				jg done
						
 000000CF  8B 45 10				mov eax, MAXLEN
 000000D2  F7 E1				mul ecx
						
 000000D4  8B 75 14				mov esi, giantText_addr
 000000D7  03 F0				add esi, eax
						
 000000D9  B8 00000000				mov eax, 0
						compare [esi], [edi]
						
 000000EB  66| 83 F8 00				cmp ax, 0
 000000EF  7D D5				jge proc_loop
						
 000000F1  43					inc ebx 		; i++
 000000F2  FF 75 14				push DWORD PTR giantText_addr
 000000F5  FF 75 10				push DWORD PTR MAXLEN
 000000F8  53					push ebx		; pushing i
 000000F9  51					push ecx		; push j
 000000FA  E8 0000001F				call swap_proc
						
 000000FF  EB C5				jmp proc_loop
						
 00000101				done:
					
 00000101  43					inc ebx			; increment in
						
 00000102  FF 75 14				push DWORD PTR giantText_addr
 00000105  FF 75 10				push DWORD PTR MAXLEN
 00000108  53					push ebx
 00000109  FF 75 08				push DWORD PTR highz
 0000010C  E8 0000000D				call swap_proc
					
					
					
 00000111  66| 9D		popf
 00000113  5E			pop 	esi
 00000114  5F			pop 	edi
 00000115  58			pop 	eax
 00000116  5A			pop 	edx
 00000117  59			pop 	ecx
 00000118  8B E5		mov 	esp, ebp
 0000011A  5D			pop 	ebp
 0000011B  C2 0010		ret 	16

 0000011E			partition_proc ENDP
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 = [ebp+20]			giantText_addr EQU [ebp+20]
 = [ebp+16]			MAXLEN EQU [ebp+16]
 = [ebp+12]			pos2 EQU [ebp+12]
 = [ebp+8]			pos1 EQU [ebp+8]

 0000011E			swap_proc PROC NEAR32

 0000011E  55			push 	ebp 
 0000011F  8B EC		mov 	ebp, esp
 00000121  51			push 	ecx
 00000122  50			push 	eax
 00000123  53			push 	ebx
 00000124  57			push 	edi
 00000125  56			push 	esi
 00000126  66| 9C		pushf	

				;outputD pos2
				;outputD pos1
					
					; get pos1 * MAXLEN
 00000128  8B 55 10				mov edx, MAXLEN
 0000012B  8B 45 08				mov eax, pos1
 0000012E  F7 E2				mul edx			; pos1 * 14 is now in eax
 00000130  89 45 08				mov pos1, eax	; pos1 now contains our correct value
						
					; get pos2 * MAXLEN
 00000133  8B 55 10				mov edx, MAXLEN
 00000136  8B 45 0C				mov eax, pos2
 00000139  F7 E2				mul edx			; pos2 * 14 is now in eax
 0000013B  89 45 0C				mov pos2, eax	; pos2 now contains our correct value
						
 0000013E  8B 4D 10				mov ecx, MAXLEN		; set counter for the temp_storage_loop
						
 00000141  8B 75 14				mov esi, giantText_addr		; move our giant text to esi for loading to al register
						
 00000144  03 75 0C				add esi, pos2				; get to the position we need to "copy" the word
						
						
 00000147  8B DC				mov ebx, esp				; store esp in edx for after loop
						
					
 00000149				temp_storage_loop:
						
 00000149  83 F9 00					cmp ecx, 0
 0000014C  74 08					je continue
							
 0000014E  AC						lodsb
 0000014F  4C						dec esp
 00000150  88 04 24					mov [esp], al
							
 00000153  49						dec ecx
							
 00000154  EB F3					jmp temp_storage_loop
						
 00000156				continue:
					
 00000156  8B E3				mov esp, ebx 	; move esp back to what it was
					
							
						
 00000158  8B 75 14				mov esi, giantText_addr		

 0000015B  8B 7D 14				mov edi, giantText_addr		; the "rep movsb" will put the text we moved text to edi
						
						
 0000015E  8B 45 08				mov eax, pos1 				; get our positioning 
 00000161  8B 55 0C				mov edx, pos2				; get our positioning
						
 00000164  03 F0				add esi, eax				
 00000166  03 FA				add edi, edx
						
					
 00000168  8B 4D 10				mov ecx, MAXLEN				; our counter for rep movsb
						
 0000016B  F3/ A4				rep movsb					; do the FIRST move
						
						
						
 0000016D  8B 4D 10				mov ecx, MAXLEN				; our counter for below
						
 00000170  8B 7D 14				mov edi, giantText_addr		; we want the text stored to be put into our destination
						
					
 00000173  03 F8				add edi, eax				; get to the position where we want to put our text stored in the stack
						
						
						
 00000175  8B DC				mov ebx, esp				; store esp in ebx for after loop
					
 00000177				storing_loop:
					
 00000177  83 F9 00				cmp ecx, 0
 0000017A  74 08				je 	done
					
 0000017C  4C					dec esp
 0000017D  8A 04 24				mov al, [esp]
						
 00000180  AA					stosb
						
 00000181  49					dec ecx
						
 00000182  EB F3				jmp storing_loop
						
 00000184				done:

 00000184  8B E3			mov esp, ebx 	; move esp back to what it was


 00000186  66| 9D		popf
 00000188  5E			pop 	esi
 00000189  5F			pop 	edi
 0000018A  5B			pop 	ebx
 0000018B  58			pop		eax
 0000018C  59			pop 	ecx
 0000018D  8B E5		mov 	esp, ebp
 0000018F  5D			pop 	ebp
 00000190  C2 0010		ret 	16

 00000193			swap_proc ENDP

				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;















				END
Microsoft (R) Macro Assembler Version 6.15.8803		    04/19/19 13:43:38
quicksort.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

append . . . . . . . . . . . . .	Proc
atod . . . . . . . . . . . . . .	Proc
atoi . . . . . . . . . . . . . .	Proc
compare  . . . . . . . . . . . .	Proc
dtoa . . . . . . . . . . . . . .	Proc
equals_ignore_case . . . . . . .	Proc
equals . . . . . . . . . . . . .	Proc
index_of . . . . . . . . . . . .	Proc
inputD . . . . . . . . . . . . .	Proc
inputW . . . . . . . . . . . . .	Proc
input  . . . . . . . . . . . . .	Proc
itoa . . . . . . . . . . . . . .	Proc
outputD  . . . . . . . . . . . .	Proc
outputW  . . . . . . . . . . . .	Proc
output . . . . . . . . . . . . .	Proc
replace  . . . . . . . . . . . .	Proc
strcopy  . . . . . . . . . . . .	Proc
strlen . . . . . . . . . . . . .	Proc
substring  . . . . . . . . . . .	Proc
to_lower . . . . . . . . . . . .	Proc


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
_DATA  . . . . . . . . . . . . .	32 Bit	 00000010 DWord	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000193 DWord	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

partition_proc . . . . . . . . .	P Near	 0000009D _TEXT	Length= 00000081 Public
  proc_loop  . . . . . . . . . .	L Near	 000000C6 _TEXT	
  done . . . . . . . . . . . . .	L Near	 00000101 _TEXT	
quicksort_proc . . . . . . . . .	P Near	 0000003D _TEXT	Length= 00000060 Public
  dantes_Gates . . . . . . . . .	L Near	 00000090 _TEXT	
quicksort_start_proc . . . . . .	P Near	 00000000 _TEXT	Length= 0000003D Public
swap_proc  . . . . . . . . . . .	P Near	 0000011E _TEXT	Length= 00000075 Public
  temp_storage_loop  . . . . . .	L Near	 00000149 _TEXT	
  continue . . . . . . . . . . .	L Near	 00000156 _TEXT	
  storing_loop . . . . . . . . .	L Near	 00000177 _TEXT	
  done . . . . . . . . . . . . .	L Near	 00000184 _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000000h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
CR . . . . . . . . . . . . . . .	Number	 0000000Dh   
LF . . . . . . . . . . . . . . .	Number	 0000000Ah   
MAXLEN . . . . . . . . . . . . .	Text   	 [ebp+16]
append_proc  . . . . . . . . . .	L Near	 00000000 FLAT	External
atodproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
atoiproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
carriage . . . . . . . . . . . .	Byte	 00000000 _DATA	
compare_proc . . . . . . . . . .	L Near	 00000000 FLAT	External
dtoaproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
equals_ignore_case_proc  . . . .	L Near	 00000000 FLAT	External
equals_proc  . . . . . . . . . .	L Near	 00000000 FLAT	External
giantText_addr . . . . . . . . .	Text   	 [ebp+20]
highz  . . . . . . . . . . . . .	Text   	 [ebp+8]
indexof_proc . . . . . . . . . .	L Near	 00000000 FLAT	External
inproc . . . . . . . . . . . . .	L Near	 00000000 FLAT	External
itoaproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
lowz . . . . . . . . . . . . . .	Text   	 [ebp+12]
numWords . . . . . . . . . . . .	Text   	 [ebp+8]
outproc  . . . . . . . . . . . .	L Near	 00000000 FLAT	External
pos1 . . . . . . . . . . . . . .	Text   	 [ebp+8]
pos2 . . . . . . . . . . . . . .	Text   	 [ebp+12]
replace_proc . . . . . . . . . .	L Near	 00000000 FLAT	External
strcopy_proc . . . . . . . . . .	L Near	 00000000 FLAT	External
strlen_proc  . . . . . . . . . .	L Near	 00000000 FLAT	External
substring_proc . . . . . . . . .	L Near	 00000000 FLAT	External
text . . . . . . . . . . . . . .	Byte	 00000003 _DATA	
tolower_proc . . . . . . . . . .	L Near	 00000000 FLAT	External

	   0 Warnings
	   0 Errors
